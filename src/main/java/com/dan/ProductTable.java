/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.dan;

import com.dan.model.Oder;
import com.dan.model.Oder_Item;
import com.dan.model.Product;
import com.dan.model.User;
import com.dan.service.OderService;
import com.dan.service.Oder_ItemService;
import com.dan.service.ProductService;
import com.dan.service.UserService;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class ProductTable extends javax.swing.JFrame {

    private ProductService productService;
    private String productID = "";
    private File file;
    private String account;

    /**
     * Creates new form StuffedMain
     */
    public ProductTable(String account){
        this.account = account;
        initComponents();
        loadProducts();
        loadProductsView();
        loadCartView();
        jtfImg.setVisible(false);
        checkAdmin(account);
        setIconImage(new ImageIcon(getClass().getResource("/icon/thu.png")).getImage());
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = getSize();
        int x = (screenSize.width - frameSize.width) / 2;
        int y = (screenSize.height - frameSize.height) / 2;
        setLocation(x, y);
    }
    
    public ProductTable() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 32767));
        jtabHome = new javax.swing.JTabbedPane();
        jpnProductManager = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jbtAdd = new javax.swing.JButton();
        jbtUpdate = new javax.swing.JButton();
        jbtDelete = new javax.swing.JButton();
        jtfID = new javax.swing.JTextField();
        jtfName = new javax.swing.JTextField();
        jtfPrice = new javax.swing.JTextField();
        jtfQuantity = new javax.swing.JTextField();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLabel6 = new javax.swing.JLabel();
        jtfImg = new javax.swing.JTextField();
        jtbSelect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtfDescription = new javax.swing.JTextArea();
        jlbImg = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbProduct = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        productListPanelTotal = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        productListPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jpnCart = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cartListPanel = new javax.swing.JPanel();
        emptyCartLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jbtBuyNow = new javax.swing.JButton();
        jbtClear = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jpnProductManager.setBackground(new java.awt.Color(255, 255, 255));
        jpnProductManager.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jpnProductManagerMouseClicked(evt);
            }
        });

        jLabel9.setText("Giá sản phẩm:");

        jLabel5.setText("Số lượng:");

        jbtAdd.setText("Thêm");
        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });

        jbtUpdate.setText("Cập nhật");
        jbtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtUpdateActionPerformed(evt);
            }
        });

        jbtDelete.setText("Xóa");
        jbtDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDeleteActionPerformed(evt);
            }
        });

        jLabel6.setText("Hình ảnh:");

        jtbSelect.setText("Chọn");
        jtbSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbSelectActionPerformed(evt);
            }
        });

        jtfDescription.setColumns(20);
        jtfDescription.setRows(5);
        jScrollPane2.setViewportView(jtfDescription);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Quản lý sản phẩm");

        jLabel1.setText("Mã sản phẩm:");

        jLabel2.setText("Tên sản phẩm:");

        jLabel4.setText("Mô tả:");

        jtbProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã", "Tên sản phẩm", "Mô tả", "Giá bán", "Số lượng", "Hình ảnh"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtbProduct.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jtbProduct.setRowHeight(130);
        jtbProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbProductMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbProduct);
        if (jtbProduct.getColumnModel().getColumnCount() > 0) {
            jtbProduct.getColumnModel().getColumn(0).setPreferredWidth(10);
            jtbProduct.getColumnModel().getColumn(1).setPreferredWidth(100);
            jtbProduct.getColumnModel().getColumn(2).setPreferredWidth(200);
            jtbProduct.getColumnModel().getColumn(3).setPreferredWidth(40);
            jtbProduct.getColumnModel().getColumn(4).setPreferredWidth(40);
            jtbProduct.getColumnModel().getColumn(5).setPreferredWidth(130);
        }

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/exit.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnProductManagerLayout = new javax.swing.GroupLayout(jpnProductManager);
        jpnProductManager.setLayout(jpnProductManagerLayout);
        jpnProductManagerLayout.setHorizontalGroup(
            jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnProductManagerLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(32, 32, 32)
                        .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(30, 30, 30)
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9)
                    .addComponent(jLabel6)
                    .addComponent(jbtAdd))
                .addGap(18, 18, 18)
                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbtUpdate)
                            .addComponent(jlbImg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnProductManagerLayout.createSequentialGroup()
                                .addComponent(jtfImg, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtbSelect))
                            .addComponent(jbtDelete, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(19, 19, 19))
            .addComponent(jScrollPane1)
            .addGroup(jpnProductManagerLayout.createSequentialGroup()
                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1))
        );
        jpnProductManagerLayout.setVerticalGroup(
            jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnProductManagerLayout.createSequentialGroup()
                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnProductManagerLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)))
                            .addGroup(jpnProductManagerLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(jtfPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(9, 9, 9)
                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpnProductManagerLayout.createSequentialGroup()
                                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6))
                            .addGroup(jpnProductManagerLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jtfQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jlbImg, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                                        .addGap(20, 20, 20)
                                        .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jtfImg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jtbSelect)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnProductManagerLayout.createSequentialGroup()
                                .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jpnProductManagerLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(jLabel4)))
                .addGap(14, 14, 14)
                .addGroup(jpnProductManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtUpdate)
                    .addComponent(jbtDelete)
                    .addComponent(jbtAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
        );

        jtabHome.addTab("Sản phẩm", jpnProductManager);

        productListPanelTotal.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout productListPanelLayout = new javax.swing.GroupLayout(productListPanel);
        productListPanel.setLayout(productListPanelLayout);
        productListPanelLayout.setHorizontalGroup(
            productListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 915, Short.MAX_VALUE)
        );
        productListPanelLayout.setVerticalGroup(
            productListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(productListPanel);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Trang chủ");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/exit.png"))); // NOI18N
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout productListPanelTotalLayout = new javax.swing.GroupLayout(productListPanelTotal);
        productListPanelTotal.setLayout(productListPanelTotalLayout);
        productListPanelTotalLayout.setHorizontalGroup(
            productListPanelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(productListPanelTotalLayout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
        );
        productListPanelTotalLayout.setVerticalGroup(
            productListPanelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, productListPanelTotalLayout.createSequentialGroup()
                .addGroup(productListPanelTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
        );

        jtabHome.addTab("Trang chủ", productListPanelTotal);

        jpnCart.setBackground(new java.awt.Color(255, 255, 255));

        cartListPanel.setPreferredSize(new java.awt.Dimension(806, 544));

        emptyCartLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        emptyCartLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emptyCartLabel.setText("Giỏ hàng trống");

        javax.swing.GroupLayout cartListPanelLayout = new javax.swing.GroupLayout(cartListPanel);
        cartListPanel.setLayout(cartListPanelLayout);
        cartListPanelLayout.setHorizontalGroup(
            cartListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(emptyCartLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
        );
        cartListPanelLayout.setVerticalGroup(
            cartListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cartListPanelLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(emptyCartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(360, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(cartListPanel);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Giỏ hàng");

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jbtBuyNow.setText("Mua ngay");
        jbtBuyNow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBuyNowActionPerformed(evt);
            }
        });
        jPanel1.add(jbtBuyNow);

        jbtClear.setText("Làm trống giỏ");
        jbtClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtClearActionPerformed(evt);
            }
        });
        jPanel1.add(jbtClear);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/exit.png"))); // NOI18N
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnCartLayout = new javax.swing.GroupLayout(jpnCart);
        jpnCart.setLayout(jpnCartLayout);
        jpnCartLayout.setHorizontalGroup(
            jpnCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnCartLayout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
            .addComponent(jScrollPane4)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnCartLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jpnCartLayout.setVerticalGroup(
            jpnCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnCartLayout.createSequentialGroup()
                .addGroup(jpnCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(364, 364, 364))
        );

        jtabHome.addTab("Giỏ hàng", jpnCart);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtabHome)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jtabHome, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
        try {
            // TODO add your handling code here:
            String id = jtfID.getText().trim();
            String name = jtfName.getText();
            String description = jtfDescription.getText();
            int price = Integer.parseInt(jtfPrice.getText());
            int quantity = Integer.parseInt(jtfQuantity.getText());
            String image = jtfImg.getText();
            Product product = new Product(id, name, description, price, quantity, Files.readAllBytes(this.file.toPath()));

            if (ProductService.checkProductExist(id) == false) {
                JOptionPane.showMessageDialog(null, "Mã sản phẩm đã tồn tại!");
            } 
            else {
                if(this.file == null){
                    JOptionPane.showMessageDialog(null, "Vui lòng thêm hình ảnh sản phẩm!");
                }else{
                    ProductService.addProduct(product);
                    JOptionPane.showMessageDialog(null, "Sản phẩm đã được thêm thành công!");
                    resetData();
                    loadProducts();
                    loadProductsView();
                }                
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin sản phẩm!");
            Logger.getLogger(ProductTable.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtAddActionPerformed

    private void jtbProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbProductMouseClicked
        // TODO add your handling code here:
        int row = jtbProduct.getSelectedRow();
        if (row >= 0) {
            jtfID.setEditable(false);
            productID = (String) jtbProduct.getValueAt(row, 0);
            Product product = ProductService.getProductById(productID);
            jtfID.setText(product.getId());
            jtfName.setText(product.getName());
            jtfDescription.setText(product.getDescription());
            jtfPrice.setText(product.getPrice() + "");
            jtfQuantity.setText(product.getQuantity() + "");
            byte[] bytes = product.getImage();
            ImageIcon imageIcon = new ImageIcon(bytes);
            Image img = imageIcon.getImage();
            Image newImg = img.getScaledInstance(100, 122, Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newImg);
            jlbImg.setIcon(imageIcon);
            jbtAdd.setEnabled(false);
        }
        else{
            System.out.println("hiiiiiiiii");
        }
    }//GEN-LAST:event_jtbProductMouseClicked

    private void jbtDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDeleteActionPerformed
        // TODO add your handling code here:
        Product product = ProductService.getProductById(productID);
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa sản phẩm " + product.getName());
        if (confirm == JOptionPane.YES_OPTION) {
            ProductService.deleteProduct(productID);
            loadProducts();
            JOptionPane.showMessageDialog(null, "Sản phẩm đã được xóa thành công!");
            resetData();
        }
    }//GEN-LAST:event_jbtDeleteActionPerformed

    private void jbtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtUpdateActionPerformed
        // TODO add your handling code here:
        try {
            Product product = ProductService.getProductById(productID);
            product.setName(jtfName.getText());
            product.setDescription(jtfDescription.getText());
            product.setPrice(Integer.parseInt(jtfPrice.getText()));;
            product.setQuantity(Integer.parseInt(jtfQuantity.getText()));;
            product.setImage(Files.readAllBytes(this.file.toPath()));
            ProductService.updateProduct(product);
            loadProducts();
            JOptionPane.showMessageDialog(null, "Cập nhập sản phẩm thành công");
        } catch (Exception e) {
            // TODO: handle exception
        }
    }//GEN-LAST:event_jbtUpdateActionPerformed

    private void jtbSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbSelectActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.file = fileChooser.getSelectedFile();
        }
    }//GEN-LAST:event_jtbSelectActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        productID = "";
        jtfID.setEditable(true);
        resetData();
        jbtAdd.setEnabled(true);
    }//GEN-LAST:event_formMouseClicked

    private void jpnProductManagerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpnProductManagerMouseClicked
        // TODO add your handling code here:
        productID = "";
        jtfID.setEditable(true);
        resetData();
        jbtAdd.setEnabled(true);
    }//GEN-LAST:event_jpnProductManagerMouseClicked

    private void jbtBuyNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBuyNowActionPerformed
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(null, "Xác nhận mua và thanh toán đơn hàng");
        if (confirm == JOptionPane.YES_OPTION){
            Oder oder = OderService.getOderByUser(account);
            OderService.deleteOder(oder.getId());
            loadCartView();
            JOptionPane.showMessageDialog(null, "Mua hàng thành công!");
        }
    }//GEN-LAST:event_jbtBuyNowActionPerformed

    private void jbtClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtClearActionPerformed
        // TODO add your handling code here:
        Oder oder = OderService.getOderByUser(account);
        OderService.deleteOder(oder.getId());
        JOptionPane.showMessageDialog(null, "Giỏ hàng sẽ được làm trống!");
        loadCartView();
    }//GEN-LAST:event_jbtClearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        logout();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void loadProducts() {
        DefaultTableModel model = (DefaultTableModel) jtbProduct.getModel();
        model.setRowCount(0);
        productService = new ProductService();
        List<Product> products = productService.getAllProducts();
        for (Product product : products) {
            Object[] data = {
                product.getId(),
                product.getName(),
                product.getDescription(),
                String.valueOf(product.getPrice()),
                String.valueOf(product.getQuantity()),
                product.getImage()
            };
            model.addRow(data);
        }
        jtbProduct.setModel(model);
        jtbProduct.getTableHeader().setReorderingAllowed(false);
        jtbProduct.getColumnModel().getColumn(5).setCellRenderer(new ImageRender());
    }

    private class ImageRender extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//            byte[] bytes = (byte[]) value;
//            ImageIcon imageIcon = new ImageIcon(bytes);
//            setIcon(imageIcon);
//            return this;
            if (value != null) {
                byte[] bytes = (byte[]) value;
                ImageIcon imageIcon = new ImageIcon(bytes);
                Image img = imageIcon.getImage();
                Image newImg = img.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                imageIcon = new ImageIcon(newImg);
                setIcon(imageIcon);
                // jlbImg.setIcon(imageIcon);
            } else {
                setIcon(null);
            }

            if (isSelected) {
                setBackground(table.getSelectionBackground());
            } else {
                setBackground(table.getBackground());
            }

            return this;
        }
    }

    private void resetData() {
        jtfID.setText("");
        jtfName.setText("");
        jtfDescription.setText("");
        jtfPrice.setText("");
        jtfQuantity.setText("");
        jtfID.setEditable(true);
        jlbImg.setIcon(null);
        jtfImg.setText("");
        productID = "";
    }

    private void loadProductsView() {
        productListPanel.removeAll();
        productListPanel.setLayout(new GridLayout(0, 3));
        productService = new ProductService();
        List<Product> products = productService.getAllProducts();

        for (Product product : products) {
            productListPanel.add(createProductPanel(product.getName(), product.getImage(), product.getPrice() + "", product.getId()));
        }
        productListPanel.revalidate();
        productListPanel.repaint();
    }

    private void loadCartView() {
        cartListPanel.removeAll();
        List<Oder_Item> oderItems = Oder_ItemService.getOder_ItemByUser(account);
        if (oderItems.size() == 0){
            
        }else{
            cartListPanel.setPreferredSize(null); // Remove fixed size
            cartListPanel.setLayout(new BoxLayout(cartListPanel, BoxLayout.Y_AXIS));
            
            if (oderItems == null || oderItems.isEmpty()) {
                return;
            }
            
            List<Product> products = new ArrayList<>();
            for (Oder_Item oder_Item : oderItems) {
                if (oder_Item == null || oder_Item.getProduct() == null) {
                    continue;
                }
                Product product = oder_Item.getProduct();
                product.setPrice(oder_Item.getPrice());
                product.setQuantity(oder_Item.getQuantity());
                products.add(product);
            }
        
            Oder oder = OderService.getOderByUser(account);
            
            for (Product product : products) {
                if (product.getName() == null || product.getImage() == null) {
                    System.out.println("Product with missing name or image.");
                    continue;
                }
                int idOder_Item = Oder_ItemService.getOder_ItemByOderAndProduct(oder, product).getId();
                cartListPanel.add(createCartPanel(product.getName(), product.getImage(), product.getPrice() + "", product.getQuantity(), idOder_Item));
            }
            
            cartListPanel.revalidate();
            cartListPanel.repaint();
        }
    }
    
    private JPanel createCartPanel(String name, byte[] bytes, String price, int quantity, int idOder_Item) {
        JPanel panelContainer = new JPanel();
        panelContainer.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
    
        JLabel nameLabel = new JLabel(("<html><div style='text-align: center;'>" + "Tên sản phẩm: " + name + "</div></html>"));
        nameLabel.setHorizontalAlignment(JLabel.CENTER);
    
        JLabel imageLabel = new JLabel();
        ImageIcon imageIcon = new ImageIcon(bytes);
        Image img = imageIcon.getImage();
        Image newImg = img.getScaledInstance(120, 150, Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newImg);
        imageLabel.setIcon(imageIcon);
        imageLabel.setHorizontalAlignment(JLabel.CENTER);
    
        JLabel priceLabel = new JLabel("Giá: " + price + " VND");
        priceLabel.setHorizontalAlignment(JLabel.CENTER);
    
        JPanel quantityPanel = new JPanel();
        quantityPanel.setLayout(new FlowLayout());
        JLabel quantityLabel = new JLabel("Số lượng: ");
        SpinnerNumberModel model = new SpinnerNumberModel(quantity, 1, 100, 1);
        JSpinner spinner = new JSpinner(model);
        spinner.setPreferredSize(new Dimension(50, 30)); // Set preferred size for JSpinner
        quantityPanel.add(quantityLabel);
        quantityPanel.add(spinner);
    
        JButton clearButton = new JButton("Xóa");
        JButton confirmButton = new JButton("Xác nhận");
        clearButton.setBackground(Color.RED);
        clearButton.setForeground(Color.WHITE);
        confirmButton.setBackground(Color.GREEN);
        confirmButton.setForeground(Color.BLACK);
        clearButton.setActionCommand(idOder_Item + "");
        confirmButton.setActionCommand(idOder_Item + "");
        clearButton.addActionListener(new ClearButtonClickListener());
        confirmButton.addActionListener(new ConfirmButtonClickListener());
    
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(confirmButton);
        buttonPanel.add(clearButton);
    
        gbc.insets = new Insets(5, 5, 5, 5);
    
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1;
        panelContainer.add(nameLabel, gbc);
    
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 0.2;
        panelContainer.add(imageLabel, gbc);
    
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 0.2;
        panelContainer.add(priceLabel, gbc);
    
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 0.2;
        panelContainer.add(quantityPanel, gbc);
    
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 0.2;
        panelContainer.add(buttonPanel, gbc);
    
        panelContainer.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        return panelContainer;
    }      

    private JPanel createProductPanel(String name, byte[] bytes, String price, String id) {
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(4, 1));
        panel.setPreferredSize(new Dimension(250, 400));
        JLabel nameLabel = new JLabel("Tên sản phẩm: " + name);
        nameLabel.setHorizontalAlignment(JLabel.CENTER);
        nameLabel.setPreferredSize(new Dimension(250, 20));
        JLabel imageLabel = new JLabel();
        ImageIcon imageIcon = new ImageIcon(bytes);
        Image img = imageIcon.getImage();
        Image newImg = img.getScaledInstance(130, 200, Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newImg);
        imageLabel.setIcon(imageIcon);
        imageLabel.setHorizontalAlignment(JLabel.CENTER);
        // JLabel quantityLabel = new JLabel("Số lượng: " + 1);
        JLabel priceLabel = new JLabel("Giá: " + price + " VND");
        priceLabel.setHorizontalAlignment(JLabel.CENTER);
        JButton buyButton = new JButton("Mua");
        JButton cartButton = new JButton("Thêm vào giỏ");

        buyButton.setActionCommand(id);
        buyButton.addActionListener(new ButtonClickListener());
        cartButton.setActionCommand(id);
        cartButton.addActionListener(new CartButtonClickListener());

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());
        buttonPanel.add(buyButton);
        buttonPanel.add(cartButton);

        panel.add(nameLabel);
        panel.add(imageLabel);
        panel.add(priceLabel);
        panel.add(buttonPanel);
        // panel.add(cartButton);
        panel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        return panel;
    }
    
    private void checkAdmin(String account){
        User user = UserService.getUser(account);
        String role = user.getRole();
        if(!role.equals("admin")){
            jtabHome.remove(jpnProductManager);
        }
    }

    private class ButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            Product product = ProductService.getProductById(command);
            JOptionPane.showMessageDialog(null, "Bạn đã mua sản phẩm: " + product.getName());
        }
    }

    private class CartButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            Product product = ProductService.getProductById(command);
            JOptionPane.showMessageDialog(null, "Bạn đã thêm sản phẩm: " + product.getName() + " vào giỏ hàng");

            Oder oder = OderService.getOderByUser(account);
            Oder_Item oi = Oder_ItemService.checkByOderAndItem(oder, product);
            int total = oder.getTotal();
            if (oi != null) {
                oi.setQuantity(oi.getQuantity() + 1);
                oi.setPrice(oi.getQuantity() * product.getPrice());
                Oder_ItemService.updateOder_Item(oi);
                total += product.getPrice();
            }else{
                Oder_Item oderItem = new Oder_Item();
                oderItem.setOder(oder);
                oderItem.setProduct(product);
                oderItem.setQuantity(1);
                oderItem.setPrice(product.getPrice());
                Oder_ItemService.addOder_Item(oderItem);
                total = total + product.getPrice();
            }
            oder.setTotal(OderService.getTotal(oder.getId()));
            OderService.updateOder(oder);
            loadCartView();
        }   
    }

    private class ClearButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            int command = Integer.parseInt(e.getActionCommand());
            Oder_Item oderItem = Oder_ItemService.getOder_ItemById(command);
            Product product = oderItem.getProduct();
            int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa sản phẩm " + product.getName() + " khỏi giỏ hàng?");
            if (confirm == JOptionPane.YES_OPTION) {
                Oder_ItemService.deleteOder_Item(command);
                Oder oder = OderService.getOderByUser(account);
                oder.setTotal(OderService.getTotal(oder.getId()));
                OderService.updateOder(oder);
                loadCartView();
            }
        }
    }

    private class ConfirmButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            int command = Integer.parseInt(e.getActionCommand());
            Oder_Item oderItem = Oder_ItemService.getOder_ItemById(command);
            int quantityConfirm = (int) ((JSpinner) ((JPanel) ((JPanel) ((JPanel) ((JButton) e.getSource()).getParent()).getParent()).getComponent(3)).getComponent(1)).getValue();
            int priceConfirm = oderItem.getProduct().getPrice() * quantityConfirm;
            oderItem.setQuantity(quantityConfirm);
            oderItem.setPrice(priceConfirm);
            Oder_ItemService.updateOder_Item(oderItem);
            Oder oder = OderService.getOderByUser(account);
            oder.setTotal(OderService.getTotal(oder.getId()));
            OderService.updateOder(oder);
            loadCartView();
            JOptionPane.showMessageDialog(null, "Sản phẩm " + oderItem.getProduct().getName() + " của bạn đã được cập nhật!");
        }
    }

    private void logout(){
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn đăng xuất?");
        if (confirm == JOptionPane.YES_OPTION){
            this.dispose();
            new Login().setVisible(true);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cartListPanel;
    private javax.swing.JLabel emptyCartLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtBuyNow;
    private javax.swing.JButton jbtClear;
    private javax.swing.JButton jbtDelete;
    private javax.swing.JButton jbtUpdate;
    private javax.swing.JLabel jlbImg;
    private javax.swing.JPanel jpnCart;
    private javax.swing.JPanel jpnProductManager;
    private javax.swing.JTabbedPane jtabHome;
    private javax.swing.JTable jtbProduct;
    private javax.swing.JButton jtbSelect;
    private javax.swing.JTextArea jtfDescription;
    private javax.swing.JTextField jtfID;
    private javax.swing.JTextField jtfImg;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfPrice;
    private javax.swing.JTextField jtfQuantity;
    private javax.swing.JPanel productListPanel;
    private javax.swing.JPanel productListPanelTotal;
    // End of variables declaration//GEN-END:variables
}
